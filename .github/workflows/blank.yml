name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2
  S3_BUCKET_NAME: cicd-bucket-dljinook
  CODE_DEPLOY_APPLICATION_NAME: CicdApplication
  CODE_DEPLOY_DEPLOY_GROUP_NAME: CicdDeployGroup

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup nodejs 18.x				# 노드 설치 액션
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Setup Cache					# 캐시 액션 설치 및 설정 → 배포 시간 단축
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - if: steps.npm-cache.outputs.cache-hit == 'true'	# 캐싱 여부를 출력
      run: echo 'npm cache hit!'
    - if: steps.npm-cache.outputs.cache-hit != 'true'
      run: echo 'npm cache missed!'
        
    - name: Install Dependencies				# 캐시가 없거나 다른 경우에만 모듈 설치
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install
      
    - name: npm build						# 빌드
      run: npm run build

    - name: Remove template files				# 실행과 관련 없는 파일/디렉터리 삭제 → 배포 시간 단축
      run: rm -rf node_modules public src index.html package*

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --ignore-hidden-files \
          --source .

    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOY_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
